{"version":3,"sources":["App/components/Header/Header.js","App/components/Footer/Footer.js","App/entities/Show.js","App/entities/SingleShow.js","App/services/FetchShows.js","App/components/Showpage/ShowPage.js","App/components/Showpage/CastList.js","App/components/Showpage/ShowDetails.js","App/components/Showpage/ShowSinglePage.js","App/Main.js","App/App.js","serviceWorker.js","index.js"],"names":["Header","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","react_router_dom","to","Component","Footer","Show","id","name","image","rating","mediumImage","medium","originalImage","original","SingleShow","summary","embedded","average","cast","seasons","FetchSearchedShows","value","fetch","concat","then","response","json","shows","filter","show","map","ShowPage","_this","onInputChange","e","setState","inputValue","target","data","searchedShows","onKey","state","console","log","includes","keyCode","SearchedShows","renderShows","slice","src","alt","_this2","length","Fragment","type","placeholder","aria-label","onChange","onKeyUp","CastList","castList","ShowDetails","showDet","ShowSinglePage","SeasonsList","season","premiereDate","endDate","CountSeasons","character","match","params","singleShow","_embedded","Showpage_CastList","Showpage_ShowDetails","Main","react_router","path","component","SingleShowPage","App","components_Header_Header","App_Main","components_Footer_Footer","Boolean","window","location","hostname","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd42d4f7.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {Link} from \"react-router-dom\"\r\nclass Header extends Component {\r\n    constructor(props){\r\n        super(props)\r\n            \r\n    }\r\n    \r\n    \r\n    \r\n    render(){\r\n        return (\r\n            <header className=\"text-white\">\r\n            <div className=\"container\">\r\n            <Link to=\"/\"> <h2 className=\"head\">Bit Show</h2>    </Link>\r\n            </div>\r\n            </header>\r\n        )\r\n    \r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n\r\n    <footer className=\" text-center text-white\">\r\n        <div className=\"container center mt-2\">\r\n            <span>Copyright &copy; Bit Student 2019</span>\r\n         </div>\r\n     </footer>\r\n    )\r\n}\r\n\r\n\r\nexport default Footer;","class Show {\r\n    constructor(id, name, image, rating){\r\n        this.id = id;\r\n        this.name = name;\r\n        this.mediumImage = image.medium;\r\n        this.originalImage = image.original;\r\n        this.rating = rating;\r\n    }\r\n}\r\n\r\n\r\nexport default Show;","class SingleShow {\r\n    constructor(id, name, image, rating, summary, embedded){\r\n        this.id = id;\r\n        this.name = name;\r\n        this.image = image;\r\n        this.rating = rating.average;\r\n        this.summary = summary;\r\n        this.cast = embedded.cast\r\n        this.seasons = embedded.seasons;\r\n    }\r\n}\r\n\r\nexport default SingleShow;","import Show from \"./../entities/Show\";\r\nimport SingleShow from \"./../entities/SingleShow\";\r\n\r\nconst FetchShows = (props) => {\r\n\r\n    return fetch(\"http://api.tvmaze.com/shows\")\r\n    .then(response => {\r\n        return response.json()\r\n    })\r\n    .then(shows => {\r\n        const showArr = shows.map(show => {\r\n            const {id, name, image, rating} = show;\r\n            return new Show(show.id, show.name, show.image, show.rating.average)\r\n        })\r\n        return showArr\r\n\r\n    })\r\n}\r\n\r\n\r\nconst FetchSingleShow = (id) => {\r\n                \r\n    return fetch(`http://api.tvmaze.com/shows/${id}?embed[]=seasons&embed[]=cast`)\r\n    .then(response => {\r\n        return response.json()\r\n    })\r\n    .then(singleShow => {\r\n        return new SingleShow(singleShow.id, \r\n            singleShow.name,\r\n             singleShow.image.original\r\n             , singleShow.rating,\r\n             singleShow.summary,\r\n              singleShow._embedded,\r\n               )\r\n    })\r\n}\r\n\r\nconst FetchSearchedShows = (value) => {\r\n    return fetch(`http://api.tvmaze.com/search/shows?q=${value}`)\r\n    .then(response => response.json())\r\n    .then(shows => {\r\n        const showArr = shows\r\n         .filter(show => show.show.image)\r\n        .map(show => {\r\n            const {id, name, image, rating} = show;\r\n            return new Show(show.show.id, show.show.name, show.show.image, show.show.rating.average)\r\n        })\r\n        return showArr\r\n\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\nexport {\r\n    FetchShows,\r\n    FetchSingleShow,\r\n    FetchSearchedShows\r\n}","import React, { Component } from 'react';\r\nimport * as data  from \"./../../services/FetchShows\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\nclass ShowPage extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            shows: [],\r\n            searchedShows: [],\r\n            inputValue: \"\",\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        data.FetchShows()\r\n        .then(shows => {\r\n            this.setState({\r\n                shows: shows\r\n            })\r\n        })\r\n    }\r\n    \r\n    onInputChange=(e)=> {\r\n     \r\n\r\n            this.setState({\r\n                inputValue: e.target.value\r\n            })\r\n            \r\n            data.FetchSearchedShows(e.target.value)\r\n            .then(shows => {\r\n                this.setState({\r\n                    searchedShows:shows\r\n                })\r\n            })\r\n        }\r\n    \r\n        onKey = (e)=>{\r\n            return this.state.searchedShows.filter(show => {\r\n                console.log(show.id)\r\n                if(this.state.inputValue.includes(show.name)){\r\n                        if(e.keyCode === 13){\r\n                        return\r\n                    }\r\n                    }\r\n                })\r\n        }\r\n        \r\n        SearchedShows = () => {\r\n            return this.state.searchedShows.map(show => {\r\n                return (\r\n                       <Link to={`/show/${show.id}`}>\r\n                <li>{show.name}</li>\r\n            </Link>\r\n            )\r\n        })\r\n    }\r\n    \r\n    renderShows = () => {\r\n        return   this.state.shows.slice(0, 12).map(show => {\r\n        \r\n        return (\r\n            <div className=\"showcard\">\r\n            \r\n            <Link to={`/show/${show.id}`}><img src={show.mediumImage} className=\"card-img-top\" alt=\"...\" /></Link>\r\n            <div className=\"card-body\">\r\n              <p className=\"card-text\">{show.name}</p>\r\n            </div>\r\n          \r\n          </div>\r\n        )\r\n    })\r\n}\r\n\r\n    \r\n    \r\n    \r\n    render(){\r\n        \r\n        if(!this.state.shows.length){\r\n            return <h1>Loading...</h1>\r\n        }\r\n           return (\r\n          <>\r\n            <input type=\"search\" placeholder=\"Search\" aria-label=\"Search\" \r\n            onChange={this.onInputChange}\r\n            value={this.state.inputValue}\r\n            onKeyUp={this.onKey}\r\n            />\r\n            <ul className=\"lista\">\r\n            {this.SearchedShows()}\r\n            </ul>\r\n          <h2 className=\"text-center\">Popular Shows</h2>\r\n            <div className=\"shows\">\r\n                {this.renderShows()}\r\n            </div>\r\n            </>\r\n           )\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default ShowPage;\r\n\r\n","import React from \"react\";\r\n\r\nconst CastList = (props) => {\r\n\r\n    return (\r\n                <>\r\n                <div className=\"\">\r\n                <h2>Cast</h2>\r\n                <ul>\r\n                    {props.castList()}\r\n                </ul>\r\n                </div>\r\n\r\n\r\n                </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default CastList;","import React from \"react\"\r\nimport Show from \"../../entities/Show\";\r\n\r\n\r\n\r\nconst ShowDetails = (props)=> {\r\nreturn (\r\n    <>\r\n    <div className=\"details\">\r\n    <h2>Show Details</h2>\r\n        <p>{props.showDet()}</p>\r\n        </div>\r\n    </>\r\n)\r\n\r\n}\r\n\r\n\r\nexport default ShowDetails;","import React, { Component } from 'react';\r\nimport * as data from \"./../../services/FetchShows\";\r\nimport CastList from \"./CastList\";\r\nimport ShowDetails from \"./ShowDetails\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ShowSinglePage extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            show: {},\r\n\r\n        }\r\n    }\r\n\r\n        componentDidMount(){\r\n            data.FetchSingleShow(this.props.match.params.id)\r\n            .then(show => {\r\n                this.setState({\r\n                    show: show,\r\n                })\r\n            })\r\n        }\r\n        \r\n\r\n        SeasonsList = () => {\r\n            return !this.state.show.seasons ? null : this.state.show.seasons.map(season => {\r\n                return <li>{season.premiereDate} - {season.endDate}</li>\r\n            })\r\n        }\r\n        \r\n        CountSeasons = () => {\r\n          return  !this.state.show.seasons ? null : this.state.show.seasons.length\r\n        }\r\n        \r\n       CastList = () => {\r\n           return !this.state.show.cast ? <h2>Loading...</h2> : this.state.show.cast.map(cast => {\r\n               \r\n               return <li>{cast.character.name}</li>\r\n           })\r\n       }\r\n        \r\n       ShowDetails = () => {\r\n           return this.state.show.summary\r\n       }\r\n        \r\n        \r\n        \r\n        render(){\r\n        if(!this.state.show){\r\n            return <h1>Loading...</h1>\r\n        }\r\n        return (\r\n            <>\r\n            <h1 className=\"text-center\">{this.state.show.name}</h1>\r\n            <div className=\"god\">\r\n             <img className=\"originalImg\" src={this.state.show.image} alt=\"...\" />\r\n            \r\n\r\n            <div className=\"season\">\r\n                <h2>Seasons ({this.CountSeasons()})</h2>\r\n                <ul>\r\n                    {this.SeasonsList()}\r\n                </ul>\r\n            <CastList castList={this.CastList}/>\r\n            </div>\r\n\r\n            <ShowDetails showDet={this.ShowDetails} />\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nShowSinglePage.propTypes = {\r\n    name: PropTypes.string\r\n  };\r\n\r\nexport default ShowSinglePage;","import React  from 'react';\r\nimport {Switch, Route} from \"react-router-dom\";\r\nimport ShowPage from \"./components/Showpage/ShowPage\";\r\nimport SingleShowPage from \"./components/Showpage/ShowSinglePage\";\r\n\r\nconst Main = (props) => {\r\n\r\n\r\n    return (\r\n\r\n        <Switch>\r\n\r\n        <Route path=\"/show/:id\" component={SingleShowPage} />\r\n        <Route path=\"/\" component={ShowPage} />\r\n\r\n        </Switch>\r\n    )\r\n}\r\n\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/Header/Header\";\r\nimport Footer from \"./components/Footer/Footer\";\r\nimport Main from \"./Main\";\r\n\r\n\r\nclass App extends Component {\r\n    \r\n  render() {\r\n\r\n      return (\r\n        <>\r\n            <Header />\r\n\r\n          <Main />\r\n          <Footer /> \r\n          </>\r\n      )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter>\n<App />\n</HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}